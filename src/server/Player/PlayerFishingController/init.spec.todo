return function()

-- These came from the player repository spec before the fishing logic was moved to 
-- the fishing controller.  These will need to be turned into test cases, but I am
-- holding off for now because the UUT still has a lot of hard coded values in it.

--    describe("StartFishing Remote Event", function()
--        it("Should play action and idle animations for casting a pole, if player is within 20 studs.", function()
--            local player = PlayerInstanceMockFactory.new({ UserId = 123, Name = "bob" })
--            player.DistanceFromCharacterReturnValue = 19
--            PlayerServiceMock.PlayerAdded:Fire(player)
--
--            StartFishingRE:FireServer(player)
--            expect(uut.GetPlayer(player).AnimationsPlayed.CastPole).to.ok()
--            expect(uut.GetPlayer(player).AnimationsPlayed.PoleIdle).to.ok()
--        end)
--    end)

--    describe("StartFishing Remote Event", function()
--        it("Should deploy the bobber if the casted keyframe is reached in the cast animation", function()
--            local player = PlayerInstanceMockFactory.new({ UserId = 123, Name = "bob" })
--            player.DistanceFromCharacterReturnValue = 19
--            PlayerServiceMock.PlayerAdded:Fire(player)
--
--            StartFishingRE:FireServer(player)
--            uut.GetPlayer(player).AnimationsPlayed.CastPole.KeyframeReached:Fire("Casted")
--
--            expect(uut.GetPlayer(player).DeployedBobber).to.be.ok()
--        end)
--    end)
--
--   describe("StartFishing Remote Event", function()
--        it("Should not play action and idle animations for casting a pole, if player is not within 20 studs.", function()
--            local player = PlayerInstanceMockFactory.new({ UserId = 123, Name = "bob" })
--            player.DistanceFromCharacterReturnValue = 20
--            PlayerServiceMock.PlayerAdded:Fire(player)
--
--            StartFishingRE:FireServer(player)
--            expect(uut.GetPlayer(player).AnimationsPlayed.CastPole).never.to.be.ok()
--            expect(uut.GetPlayer(player).AnimationsPlayed.PoleIdle).never.to.be.ok()
--        end)
--    end)
--
--    describe("StopFishing Remote Event", function()
--        it("Should stop the action, and idle pole animations, if they are playing", function()
--            local player = PlayerInstanceMockFactory.new({ UserId = 123, Name = "bob" })
--            player.DistanceFromCharacterReturnValue = 19
--            
--            PlayerServiceMock.PlayerAdded:Fire(player)
--
--            StartFishingRE:FireServer(player)
--            StopFishingRE:FireServer(player)
--            expect(uut.GetPlayer(player).AnimationsStopped.CastPole).to.equal(true)
--            expect(uut.GetPlayer(player).AnimationsStopped.PoleIdle).to.equal(true)
--        end)
--
--        it("Should undeploy the bobber.", function()
--            local player = PlayerInstanceMockFactory.new({ UserId = 123, Name = "bob" })
--            player.DistanceFromCharacterReturnValue = 19
--            
--            PlayerServiceMock.PlayerAdded:Fire(player)
--
--            StartFishingRE:FireServer(player)
--            StopFishingRE:FireServer(player)
--            expect(uut.GetPlayer(player).DeployedBobber).never.to.equal(true)
--        end)
--    end)

end